#include <stdio.h>
#include <stdlib.h>

// Fonction de fusion : combine deux sous-listes triées en une seule liste triée
void fusion(int *a, int n, int m) {
    int i, j, k;
    // Allocation dynamique pour une liste temporaire de taille n
    int *x = malloc(n * sizeof(int));

    // Parcourt les deux sous-listes et les fusionne dans l'ordre trié
    for (i = 0, j = m, k = 0; k < n; k++) {
        if (j == n) {
            // Si on a épuisé la seconde sous liste
            x[k] = a[i++];
        } else if (i == m) {
            // Si on a épuisé la première sous liste
            x[k] = a[j++];
        } else if (a[j] < a[i]) {
            // Si l'élément de la seconde liste est plus petit
            x[k] = a[j++];
        } else {
            // Sinon, on prend l'élément de la première liste
            x[k] = a[i++];
        }
    }

    // Copie des éléments triés de x vers la liste originale a
    for (i = 0; i < n; i++) {
        a[i] = x[i];
    }

    // Afficher l'état actuel du tableau après chaque fusion
    afficherVecteur(n, a);

    // Libérer la mémoire allouée pour la liste temporaire
    free(x);
}

// Fonction principale de tri par fusion
void tri_fusion(int *liste, int taille) {
    // Cas de base : un tableau de taille inférieure à 2 est déjà trié
    if (taille < 2) return;

    // Division du tableau en deux sous-tableaux
    int milieu = taille / 2;

    // Appels récursifs pour trier les deux moitiés
    tri_fusion(liste, milieu);                 // Trie la première moitié
    tri_fusion(liste + milieu, taille - milieu); // Trie la seconde moitié

    // Fusion des deux sous-tableaux triés
    fusion(liste, taille, milieu);
}

int main() {
    int tableau[] = {38, 27, 43, 3, 9, 82, 10};
    int taille = sizeof(tableau) / sizeof(tableau[0]);

    printf("Tableau initial :\n");
    afficherVecteur(taille, tableau);

    printf("\nÉtapes du tri par fusion :\n");
    tri_fusion(tableau, taille);

    printf("\nTableau trié :\n");
    afficherVecteur(taille, tableau);

    return 0;
}

